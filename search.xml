<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>VUS-SSR项目部署</title>
      <link href="/2019/01/03/VUS-SSR%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/01/03/VUS-SSR%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>Vue-SSR : 项目部署</p><p>抱歉这篇文章距离上篇很久，一方面是项目有点忙，一方面玩的也很用力。上次发了几个钓鱼的文章主题联想，我在朋友圈也发了一遍，很多人（假装有很多）想看vue ssr相关的东西，可能从零到一的东西太多了，也不需要我再重复发一遍。</p><p>ssr项目的部署也是困扰过我一段时间</p><p>非SSR项目部署</p><p>在做这个项目之前，前端的部署都是极为简单的，流程就是</p><ol><li>npm run build 编译打包</li><li>将打包出来的 dist 包单独放到一个库里，这里有好多个项目，push到放项目编译包的远程仓库</li><li>登陆服务器，在服务器上把包 pull 下来</li><li>如果代码托管了七牛，会登陆七牛刷新一下资源</li></ol><p>当然，这个步骤里面省略了 nginx 配置，默认认为你的 nginx 已经配好，域名解析也做好了。</p><p>SSR项目部署</p><p>在做之前也是网上搜了不少大神的文章，看了很多别人的项目代码，讲到部署的少之又少，我所能理解的就是 npm run build 然后 npm run start ,但是问题是我又不能把整个项目都放到服务器上，生产环境我只需要把打包后的文件放到服务器上，nginx还是要配的，假设你nginx配好了，注意nginx配置的端口要跟node的端口一致，不知道部署的时候，百思不得其解，想明白了其实就是部署一个node的项目，我以前也没有发布过node的项目，迷糊了一些时间。</p><p>流程如下：</p><ol><li>npm run build 编译打包</li><li>【睁大眼睛】👀 要将1⃣️打包出来的 dist/ 文件夹  2⃣️ package.json  3⃣️ server.js  4⃣️ public/文件夹 这四样东西拿出来，放到某个远程仓库</li><li>登陆服务器，在服务器上把包 pull 下来</li><li>在服务器上npm install，这一步需要</li><li>【👀】服务器下载 pm2 进程管理工具，你可以用或者不用， pm2 start &lt; 项目名 &gt; –watch</li></ol><p>请您提出疑问</p><p>我不知道如何描述的更清楚一些，如果你看到文章还是有疑问。不如在评论区留下你的疑问，我会根据您的提问来完善这个文章。</p><p>完！</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue-ssr </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue-SSR: head Mixin 实现头部信息管理</title>
      <link href="/2018/10/23/Vue-SSR-head-Mixin-%E5%AE%9E%E7%8E%B0%E5%A4%B4%E9%83%A8%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86/"/>
      <url>/2018/10/23/Vue-SSR-head-Mixin-%E5%AE%9E%E7%8E%B0%E5%A4%B4%E9%83%A8%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上周发了我第一篇技术博客，<strong>传送门1：<a href="https://juejin.im/post/5bc44a71e51d450e935caa11" target="_blank" rel="noopener">JS中的数组过滤，从简单筛选到多条件筛选</a></strong>，感谢大家的支持，尤其是提出疑问，发现错误的同学，感谢你们。发完博客以后，我用 hexo 搭了一个 github pages, 绑定了我之前买的域名，<strong>传送门2： <a href="http://blog.yidol.cn/" target="_blank" rel="noopener">http://blog.yidol.cn/</a></strong>，以后我的博客会在GitHub发一遍，然后掘金抄送一遍。</p><p>近两个月都在忙着搭建 vue-ssr 的项目，因为公司产品是媒体类，SEO 很重要，第一周是尝试用 nuxt 搭建了一个项目，nuxt 确实是开箱即用，比较爽，就是配置的时候可能要看看 nuxt 的文档，还要看看 webpack 的文档，很多人使用 vue-cli3 产生了同样的感受。由于公司给的时间也够，我决定参考尤雨溪的官方例子🌰 <strong>传送门3: <a href="https://github.com/vuejs/vue-hackernews-2.0" target="_blank" rel="noopener">vue-hacknews-2.0</a></strong> 搭建了我司的新 PC 端项目，整个项目是用 webpack4+vue2+vue-ssr 从 0 到 1，踩过一些坑，多谢网上各个平台的同学们贡献的文章，我打算陆续写文章分享项目搭建的过程，希望也能够帮助到大家。</p></blockquote><p>&#8195;&#8195;下面进入这篇文章的主题，尤大大的例子里是做了一个 tilte 的 Mixin 方法，可以修改各个页面的 title，但是我司的需求可能是不同的页面不仅是要不同的 title，还要不同的 description，author，keywords，网上有很多人使用 vue-meta, 感兴趣的小伙伴可以搜索一下用法，今天我想讨论的是改造尤大大项目里的 title mixin 为 head mixin，满足我司需求。</p><h2 id="尤大大的title-mixin"><a href="#尤大大的title-mixin" class="headerlink" title="尤大大的title mixin"></a>尤大大的title mixin</h2><p>&#8195;&#8195;打开 vue-hacknews 项目 <code>src/util/title.js</code> ,可以看到以下代码或者 <strong>传送门4: <a href="https://ssr.vuejs.org/zh/guide/head.html" target="_blank" rel="noopener">vue SSR 指南 Head 管理</a></strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取模版里的 title</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTitle</span> (<span class="params">vm</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">const</span> &#123; title &#125; = vm.$options</span><br><span class="line">  <span class="keyword">if</span> (title) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> title === <span class="string">'function'</span></span><br><span class="line">      ? title.call(vm)</span><br><span class="line">      : title</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有 title 了就加载新的 title，没有就还有默认的顶着，默认的 title 在哪里，稍后告诉你</span></span><br><span class="line"><span class="comment">// 下面俩一个是服务器端渲染时调用，一个是客户端渲染是调用，为啥俩不一样，可查看文末知识点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverTitleMixin = &#123; </span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">const</span> title = getTitle(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (title) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$ssrContext.title = <span class="string">`Vue HN 2.0 | <span class="subst">$&#123;title&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clientTitleMixin = &#123; </span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">const</span> title = getTitle(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (title) &#123;</span><br><span class="line">      <span class="built_in">document</span>.title = <span class="string">`Vue HN 2.0 | <span class="subst">$&#123;title&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> process.env.VUE_ENV === <span class="string">'server'</span></span><br><span class="line">  ? serverTitleMixin</span><br><span class="line">  : clientTitleMixin</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;文件 <code>src/app.js</code> 在这里全局引入 Mixin</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> titleMixin <span class="keyword">from</span> <span class="string">'./util/title'</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// mixin for handling title</span></span><br><span class="line">Vue.mixin(titleMixin)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;这里是默认 title 的地方<code>src/server.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">//在render函数里</span></span><br><span class="line">  <span class="keyword">const</span> context = &#123;</span><br><span class="line">    title: <span class="string">'Vue HN 2.0'</span>, <span class="comment">// default title</span></span><br><span class="line">    url: req.url</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>&#8195;&#8195;具体组件里的用法 <code>src/views/UserView.vue</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'user-view'</span>,</span><br><span class="line">  ...</span><br><span class="line">  title () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.user</span><br><span class="line">      ? <span class="keyword">this</span>.user.id</span><br><span class="line">      : <span class="string">'User not found'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Head-Mixin的改造过程"><a href="#Head-Mixin的改造过程" class="headerlink" title="Head Mixin的改造过程"></a>Head Mixin的改造过程</h2><p>&#8195;&#8195;首先是明确我的需求，如文章开头所说，仅仅是 title 是不符合我的需求的，我还需要能够自定义 description，author，keywords。</p><h3 id="组件里用法"><a href="#组件里用法" class="headerlink" title="组件里用法"></a>组件里用法</h3><p>&#8195;&#8195;尤大大的 title 是返回一个字符串，我把我需要的塞到了一个对象里，需要自定义的就 return 出去，不需要的就还是默认的就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'article-list'</span>,</span><br><span class="line">  ...</span><br><span class="line">  head()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'文章列表'</span>,</span><br><span class="line">        <span class="string">'author'</span>: <span class="string">'大侠'</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="默认的头信息"><a href="#默认的头信息" class="headerlink" title="默认的头信息"></a>默认的头信息</h3><p>&#8195;&#8195;同样在 <code>server.js</code> 里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同样也在render 函数里</span></span><br><span class="line">  <span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="string">'title'</span>: <span class="string">'可爱王'</span>, <span class="comment">// 默认title</span></span><br><span class="line">    <span class="string">'author'</span>: <span class="string">'Anne'</span>, <span class="comment">// 默认author</span></span><br><span class="line">    <span class="string">'keywords'</span>: <span class="string">'我是keywords'</span>, <span class="comment">// 默认keywords</span></span><br><span class="line">    <span class="string">'description'</span>: <span class="string">'我是description'</span>, <span class="comment">//默认description </span></span><br><span class="line">    <span class="string">'url'</span>: req.url <span class="comment">// 我是重要的一行代码，但是我跟这篇文章没关系</span></span><br><span class="line">  &#125;;<span class="comment">// 没错我很无聊，打了这么多无聊的注释</span></span><br></pre></td></tr></table></figure><h3 id="引入全局head-mixin"><a href="#引入全局head-mixin" class="headerlink" title="引入全局head mixin"></a>引入全局head mixin</h3><p>&#8195;&#8195;同样在 <code>src/main.js</code> 里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> headMixin <span class="keyword">from</span> <span class="string">'./utils/head'</span>;</span><br><span class="line"><span class="comment">// head()</span></span><br><span class="line">Vue.mixin(headMixin);</span><br></pre></td></tr></table></figure><h3 id="定义head-Mixin"><a href="#定义head-Mixin" class="headerlink" title="定义head Mixin"></a>定义head Mixin</h3><p>&#8195;&#8195;在 <code>src/utils/head.js</code> 里，在这里是判断了是否有 head，是否有各个我需要的东西，有就加载新的，没有就还是默认的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHead</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; head &#125; = vm.$options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (head) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> head === <span class="string">'function'</span> ?</span><br><span class="line">      head.call(vm) :</span><br><span class="line">      head;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serverHeadMixin = &#123;</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">const</span> head = getHead(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">      <span class="keyword">if</span> (head.title) <span class="keyword">this</span>.$ssrContext.title = <span class="string">`<span class="subst">$&#123;head.title&#125;</span>-可爱王`</span>;</span><br><span class="line">      <span class="keyword">if</span> (head.author) <span class="keyword">this</span>.$ssrContext.author = <span class="string">`<span class="subst">$&#123;head.author&#125;</span>-可爱王`</span>;</span><br><span class="line">      <span class="keyword">if</span> (head.keywords) <span class="keyword">this</span>.$ssrContext.keywords = head.keywords;</span><br><span class="line">      <span class="keyword">if</span> (head.description) <span class="keyword">this</span>.$ssrContext.description = head.description;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clientHeadMixin = &#123;</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">const</span> head = getHead(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head) &#123;</span><br><span class="line">      <span class="keyword">if</span> (head.title) <span class="built_in">document</span>.title = <span class="string">`<span class="subst">$&#123;head.title&#125;</span>-可爱王`</span>;</span><br><span class="line">      <span class="keyword">if</span> (head.author) <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="author"]'</span>).setAttribute(<span class="string">'content'</span>, <span class="string">`<span class="subst">$&#123;head.author&#125;</span>-可爱王`</span>);</span><br><span class="line">      <span class="keyword">if</span> (head.keywords) <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="keywords"]'</span>).setAttribute(<span class="string">'content'</span>, head.keywords);</span><br><span class="line">      <span class="keyword">if</span> (head.description) <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="description"]'</span>).setAttribute(<span class="string">'content'</span>, head.description);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> process.env.VUE_ENV === <span class="string">'server'</span> ?</span><br><span class="line">  serverHeadMixin :</span><br><span class="line">  clientHeadMixin;</span><br></pre></td></tr></table></figure><h2 id="知识点一：混入-mixins"><a href="#知识点一：混入-mixins" class="headerlink" title="知识点一：混入 (mixins)"></a>知识点一：混入 (mixins)</h2><p>&#8195;&#8195;在做这个项目之前，我没有用过这个东西，<strong>传送门5: <a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">vue官方文档对混入的介绍</a></strong> </p><blockquote><p>混入 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。</p></blockquote><p>&#8195;&#8195;简而言之，就是你可以自定义一个钩子函数，在每一个 Vue 实例里引用，比如这篇文章里提到的 <code>head()</code> , 帅呆了。</p><h2 id="知识点二：服务器端渲染与客户端渲染的生命周期不同"><a href="#知识点二：服务器端渲染与客户端渲染的生命周期不同" class="headerlink" title="知识点二：服务器端渲染与客户端渲染的生命周期不同"></a>知识点二：服务器端渲染与客户端渲染的生命周期不同</h2><p>&#8195;&#8195;在所有的生命周期钩子函数里，只有 <code>beforeCreate</code> 和 <code>created</code> 会在服务器端渲染过程中调用，官方文档有提到这个，所以在开发过程中要一定要注意这点。</p><p>完！</p><h2 id="题外话：关于未来文章的规划"><a href="#题外话：关于未来文章的规划" class="headerlink" title="题外话：关于未来文章的规划"></a>题外话：关于未来文章的规划</h2><p>&#8195;&#8195;😁如果你还在看的话，帮忙留个言吧！ 上周的文章在掘金得到了一百多个赞，开心，特别感谢我的朋友 Dylan 同学的纠错以及掘金网友 Auroral 提醒递归优化的实例代码与 deepclone 无关联。前端从业两年多，一直没有输出文章，上周突发奇想要整理出自己的博客，能够梳理自己的知识，分享出来也能够帮助到大家， 也希望自己能够坚持下去。想写的太多，精力有限，我想列一些想写的文章，一篇一篇的出，走过路过如果看到了这篇文章，可以评论一下哪篇是你想看的，民意比较多的我就先写啦。&lt;(￣︶￣)&gt; </p><ol><li><p>vue 单页应用的多 layout 实现</p></li><li><p>从零到一：用 webpack4 搭一个 vue 项目</p></li><li><p>从零到一：用 vue-cli3 搭一个项目</p></li><li><p>从零到一：用 nuxt 搭一个 vue-ssr 项目</p></li><li><p>从零到一：用 github 和 hexo 搭一个自己的线上博客</p></li><li><p>Vue-ssr 系列 基于 vue-hacknhews 2.0 想到什么写什么咯</p></li><li><p>前端开发中一些实用的工具类网站</p></li></ol><pre><code>从零到一已经有很多人写过啦，但我还是列到了列表里，如果不幸胜出了，我就尽力写的不同一些吧。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue-ssr </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的数组过滤，从简单筛选到多条件筛选</title>
      <link href="/2018/10/16/JS%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E8%BF%87%E6%BB%A4%EF%BC%8C%E4%BB%8E%E7%AE%80%E5%8D%95%E7%AD%9B%E9%80%89%E5%88%B0%E5%A4%9A%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89/"/>
      <url>/2018/10/16/JS%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E8%BF%87%E6%BB%A4%EF%BC%8C%E4%BB%8E%E7%AE%80%E5%8D%95%E7%AD%9B%E9%80%89%E5%88%B0%E5%A4%9A%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89/</url>
      
        <content type="html"><![CDATA[<p>在上家公司工作的时候，有一个需求是在前端部分完成筛选功能，一次拿到所有数据，然后根据条件筛选。通常情况下筛选是后台给接口，在数据量不大的情况下，也有人可能会遇到前端筛选这样的情况，特别写了这篇文章分享给大家，有问题请指出，互相学习。</p><p>一般情况下的单条件筛选，数组的filter方法就能够满足需求，本文讨论的重点是多条件下的复合筛选，并列出了几个相关知识点。</p><p>以下是很多个🌰🌰🌰🌰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 这个是例子中的被筛选数组</span></span><br><span class="line"><span class="keyword">var</span> aim = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'Anne'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">gender</span>:<span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'Leila'</span>, <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">gender</span>:<span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'Jay'</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">gender</span>:<span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'Mark'</span>, <span class="attr">age</span>: <span class="number">40</span>, <span class="attr">gender</span>:<span class="string">'male'</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="单条件单数据筛选"><a href="#单条件单数据筛选" class="headerlink" title="单条件单数据筛选"></a>单条件单数据筛选</h3><p>根据单个名字筛选，用filter方法，判断name是否为目标名字即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 根据单个名字筛选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByName</span>(<span class="params">aim, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aim.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.name == name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入 aim 'Leila' 期望输出为 [&#123;name:'Leila', age: 16, gender:'female'&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(filterByName(aim,<span class="string">'leila'</span>))</span><br></pre></td></tr></table></figure></p><h3 id="单条件多数据筛选"><a href="#单条件多数据筛选" class="headerlink" title="单条件多数据筛选"></a>单条件多数据筛选</h3><p>根据多个名字筛选，这里是用for循环遍历目标数组，然后用find方法找到后push到结果数组里，用find方法是重名情况下也能得到想要的结果。for循环可以用数组的一些遍历方法替代，代码可以更简化，示例就是大概表达个意思。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 根据多个名字筛选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByName1</span>(<span class="params">aim, nameArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nameArr.length; i++) &#123;</span><br><span class="line">        result.push(aim.find(<span class="function"><span class="params">item</span> =&gt;</span> item.name = nameArr[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入 aim ['Anne','Jay'] </span></span><br><span class="line"><span class="comment">//期望输出为 [&#123;name:'Anne', age: 23, gender:'female'&#125;,&#123;name:'Jay', age: 19, gender:'male'&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(filterByName1(aim,[<span class="string">'Leila'</span>,<span class="string">'Jay'</span>]))</span><br><span class="line"><span class="comment">// 有BUG 改进后</span></span><br></pre></td></tr></table></figure></p><h3 id="多条件单数据筛选"><a href="#多条件单数据筛选" class="headerlink" title="多条件单数据筛选"></a>多条件单数据筛选</h3><p>根据单个名字或者单个年龄筛选，用filter方法，判断条件之间是或的关系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 根据名字或者年龄筛选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByName2</span>(<span class="params">aim, name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aim.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.name == name || item.age == age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(filterByName2(aim,<span class="string">'Leila'</span>,<span class="number">19</span>))</span><br></pre></td></tr></table></figure></p><h3 id="多条件多数据筛选"><a href="#多条件多数据筛选" class="headerlink" title="多条件多数据筛选"></a>多条件多数据筛选</h3><p>我最初是用了很笨的双for循环去做，发现很慢，而且并没有达到预期的效果。具体的心路历程已经太遥远，简单介绍以下这个筛选算法。</p><p>首先是把筛选条件都塞到一个对象里，用object对象的keys方法获取到筛选的条件名，及需要筛选的是哪个条件，是name？age? gender?</p><p>然后使用filter方法对目标数据进行筛选，🌰如下⬇️</p><p>根据名字和年龄多元素筛选<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//根据名字和年龄多元素筛选</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiFilter</span>(<span class="params">array, filters</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filterKeys = <span class="built_in">Object</span>.keys(filters)</span><br><span class="line">  <span class="comment">// filters all elements passing the criteria</span></span><br><span class="line">  <span class="keyword">return</span> array.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// dynamically validate all filter criteria</span></span><br><span class="line">    <span class="keyword">return</span> filterKeys.every(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//ignore when the filter is empty Anne</span></span><br><span class="line">      <span class="keyword">if</span>(!filters[key].length) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> !!~filters[key].indexOf(item[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这段代码并非我原创，感兴趣的可以去原作者那里点个赞</span></span><br><span class="line"><span class="comment"> * 作者是：@author https://gist.github.com/jherax</span></span><br><span class="line"><span class="comment"> * 这段代码里我只加了一行，解决部分筛选条件清空时候整体筛选失效的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filters = &#123;</span><br><span class="line">    name:[<span class="string">'Leila'</span>, <span class="string">'Jay'</span>],</span><br><span class="line">    age:[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果：</span></span><br><span class="line"><span class="comment"> * [&#123;name: "Leila", age: 16, gender: "female"&#125;,</span></span><br><span class="line"><span class="comment"> *  &#123;name: "Jay", age: 19, gender: "male"&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>例如这里，判断每条数据的name值是否在filters.name数组里，是的话返回true，判断filters.age是空数组的话直接返回true，空数组是模拟了age条件被清空的情况，我们仍然能得到正确的筛选数据。</p><h3 id="知识点1-Object-key-获取数组索引或者对象属性"><a href="#知识点1-Object-key-获取数组索引或者对象属性" class="headerlink" title="知识点1: Object.key() 获取数组索引或者对象属性"></a>知识点1: Object.key() 获取数组索引或者对象属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr)); </span><br><span class="line"><span class="comment">// ["0", "1", "2"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); </span><br><span class="line"><span class="comment">// ["0", "1", "2"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anObj = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(anObj)); </span><br><span class="line"><span class="comment">// ["2", "7", "100"] 猜猜为啥？</span></span><br></pre></td></tr></table></figure><h3 id="知识点2-js里的falsy"><a href="#知识点2-js里的falsy" class="headerlink" title="知识点2: js里的falsy"></a>知识点2: js里的falsy</h3><p> <strong>falsy</strong> : 0 , false, “”, null, undefined, NaN</p><p> 在判断语句中，只有上面6种情况会是false，其余的都是true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">if</span>(a!=<span class="literal">null</span>&amp;&amp;<span class="keyword">typeof</span>(a)!=<span class="literal">undefined</span>&amp;&amp;a!=<span class="string">''</span>)&#123;</span><br><span class="line">    <span class="comment">//a有内容才执行的代码  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!!a)&#123;</span><br><span class="line">    <span class="comment">//a有内容才执行的代码...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="知识点3-Array-every-与-Array-some的区别"><a href="#知识点3-Array-every-与-Array-some的区别" class="headerlink" title="知识点3: Array.every 与 Array.some的区别"></a>知识点3: Array.every 与 Array.some的区别</h3><p>我的理解是在遍历数组的时候：</p><p><strong>Array.every</strong>的条件是「与」的关系，全真为真，及条件全为true则为true，有一个false就返回false</p><p><strong>Array.some</strong>的条件是「或」的关系，有真为真，条件有一个true就返回true，条件全为false的时候才返回false</p><p>下面举个🌰<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 判断每个名字都为Anne?</span></span><br><span class="line"><span class="keyword">let</span> dataEvery = aim.every(<span class="function"><span class="params">item</span> =&gt;</span> item.name === <span class="string">'Anne'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> dataEvery = aim.some(<span class="function"><span class="params">item</span> =&gt;</span> item.name === <span class="string">'Anne'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断每个名字都是字符串？</span></span><br><span class="line"><span class="keyword">let</span> dataEvery = aim.every(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">typeof</span> item.name === <span class="string">'string'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> dataEvery = aim.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">typeof</span> item.name === <span class="string">'string'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="知识点4-数组的深拷贝与浅拷贝"><a href="#知识点4-数组的深拷贝与浅拷贝" class="headerlink" title="知识点4: 数组的深拷贝与浅拷贝"></a>知识点4: 数组的深拷贝与浅拷贝</h3><p>最近参与一些前端的面试工作，深拷贝与浅拷贝是我最爱问的问题之一。一个问题就考察了数据类型，数组操作，递归算法等。</p><p>因为数组是js里的引用类型，单纯复制时复制的是其引用关系。在对获取的数据进行筛选时，我并不希望影响原始数据，所以我要用到「深拷贝」得到与原始数据数据结构完全相同又相互独立的数据，而不是只复制其引用关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 我常用方法，如果项目很大，不推荐</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"></span><br><span class="line"><span class="comment">// deepclone</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> o2[k] === <span class="string">'object'</span>) &#123;</span><br><span class="line">            o1[k] = &#123;&#125;;</span><br><span class="line">            deepClone(o1[k], o2[k]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            o1[k] = o2[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="想一想：递归算法的优化"><a href="#想一想：递归算法的优化" class="headerlink" title="想一想：递归算法的优化"></a>想一想：递归算法的优化</h3><p>这个知识点与本文关系不大。😄 抱歉之前的误导。</p><p>这个是看掘金小册前端面试指南看到的，讲算法的时候提了一下递归算法的优化，初见的时候又被惊艳到，还没有在项目里用到。感兴趣的可以试试，这个是斐波那契数列和。可以自己在浏览器里敲一下，试试不用缓存与用缓存的运算次数差别。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cache[n]) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[n];</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> prev = _fn(n - <span class="number">1</span>);</span><br><span class="line">        cache[n - <span class="number">1</span>] = prev;</span><br><span class="line">        <span class="keyword">let</span> next = _fn(n - <span class="number">2</span>);</span><br><span class="line">        cache[n - <span class="number">2</span>] = next;</span><br><span class="line">        <span class="keyword">return</span> prev + next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _fn(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count2 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    count2++;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn2(n - <span class="number">1</span>) + fn2(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完！</p>]]></content>
      
      
      
        <tags>
            
            <tag> JS基础 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
