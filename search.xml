<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JS中的数组过滤，从简单筛选到多条件筛选</title>
      <link href="/2018/10/16/JS%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E8%BF%87%E6%BB%A4%EF%BC%8C%E4%BB%8E%E7%AE%80%E5%8D%95%E7%AD%9B%E9%80%89%E5%88%B0%E5%A4%9A%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89/"/>
      <url>/2018/10/16/JS%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E8%BF%87%E6%BB%A4%EF%BC%8C%E4%BB%8E%E7%AE%80%E5%8D%95%E7%AD%9B%E9%80%89%E5%88%B0%E5%A4%9A%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89/</url>
      
        <content type="html"><![CDATA[<p>在上家公司工作的时候，有一个需求是在前端部分完成筛选功能，一次拿到所有数据，然后根据条件筛选。通常情况下筛选是后台给接口，在数据量不大的情况下，也有人可能会遇到前端筛选这样的情况，特别写了这篇文章分享给大家，有问题请指出，互相学习。</p><p>一般情况下的单条件筛选，数组的filter方法就能够满足需求，本文讨论的重点是多条件下的复合筛选，并列出了几个相关知识点。</p><p>以下是很多个🌰🌰🌰🌰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 这个是例子中的被筛选数组</span></span><br><span class="line"><span class="keyword">var</span> aim = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'Anne'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">gender</span>:<span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'Leila'</span>, <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">gender</span>:<span class="string">'female'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'Jay'</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">gender</span>:<span class="string">'male'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'Mark'</span>, <span class="attr">age</span>: <span class="number">40</span>, <span class="attr">gender</span>:<span class="string">'male'</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="单条件单数据筛选"><a href="#单条件单数据筛选" class="headerlink" title="单条件单数据筛选"></a>单条件单数据筛选</h3><p>根据单个名字筛选，用filter方法，判断name是否为目标名字即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 根据单个名字筛选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByName</span>(<span class="params">aim, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aim.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.name == name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入 aim 'Leila' 期望输出为 &#123;name:'Leila', age: 16, gender:'female'&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(filterByName(aim,<span class="string">'leila'</span>))</span><br></pre></td></tr></table></figure></p><h3 id="单条件多数据筛选"><a href="#单条件多数据筛选" class="headerlink" title="单条件多数据筛选"></a>单条件多数据筛选</h3><p>根据多个名字筛选，这里是用for循环遍历目标数组，然后用find方法找到后push到结果数组里，用find方法是重名情况下也能得到想要的结果。for循环可以用数组的一些遍历方法替代，代码可以更简化，示例就是大概表达个意思。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 根据多个名字筛选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByName1</span>(<span class="params">aim, nameArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nameArr.length; i++) &#123;</span><br><span class="line">        result.push(aim.find(<span class="function"><span class="params">item</span> =&gt;</span> item.name = nameArr[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入 aim ['Anne','Jay'] </span></span><br><span class="line"><span class="comment">//期望输出为 [&#123;name:'Anne', age: 23, gender:'female'&#125;,&#123;name:'Jay', age: 19, gender:'male'&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(filterByName1(aim,[<span class="string">'Leila'</span>,<span class="string">'Jay'</span>]))</span><br><span class="line"><span class="comment">// 有BUG 改进后</span></span><br></pre></td></tr></table></figure></p><h3 id="多条件单数据筛选"><a href="#多条件单数据筛选" class="headerlink" title="多条件单数据筛选"></a>多条件单数据筛选</h3><p>根据单个名字或者单个年龄筛选，用filter方法，判断条件之间是或的关系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 根据名字或者年龄筛选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByName2</span>(<span class="params">aim, name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> aim.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.name == name || item.age == age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(filterByName2(aim,<span class="string">'Leila'</span>,<span class="number">19</span>))</span><br></pre></td></tr></table></figure></p><h3 id="多条件多数据筛选"><a href="#多条件多数据筛选" class="headerlink" title="多条件多数据筛选"></a>多条件多数据筛选</h3><p>我最初是用了很笨的双for循环去做，发现很慢，而且并没有达到预期的效果。具体的心路历程已经太遥远，简单介绍以下这个筛选算法。</p><p>首先是把筛选条件都塞到一个对象里，用object对象的keys方法获取到筛选的条件名，及需要筛选的是哪个条件，是name？age? gender?</p><p>然后使用filter方法对目标数据进行筛选，🌰如下⬇️</p><p>根据名字和年龄多元素筛选<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//根据名字和年龄多元素筛选</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiFilter</span>(<span class="params">array, filters</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filterKeys = <span class="built_in">Object</span>.keys(filters)</span><br><span class="line">  <span class="comment">// filters all elements passing the criteria</span></span><br><span class="line">  <span class="keyword">return</span> array.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// dynamically validate all filter criteria</span></span><br><span class="line">    <span class="keyword">return</span> filterKeys.every(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//ignore when the filter is empty Anne</span></span><br><span class="line">      <span class="keyword">if</span>(!filters[key].length) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> !!~filters[key].indexOf(item[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这段代码并非我原创，感兴趣的可以去原作者那里点个赞</span></span><br><span class="line"><span class="comment"> * 作者是：@author https://gist.github.com/jherax</span></span><br><span class="line"><span class="comment"> * 这段代码里我只加了一行，解决部分筛选条件清空时候整体筛选失效的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filters = &#123;</span><br><span class="line">    name:[<span class="string">'Leila'</span>, <span class="string">'Jay'</span>],</span><br><span class="line">    age:[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 结果：</span></span><br><span class="line"><span class="comment"> * [&#123;name: "Leila", age: 16, gender: "female"&#125;,</span></span><br><span class="line"><span class="comment"> *  &#123;name: "Jay", age: 19, gender: "male"&#125;]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>例如这里，判断每条数据的name值是否在filters.name数组里，是的话返回true，判断filters.age是空数组的话直接返回true，空数组是模拟了age条件被清空的情况，我们仍然能得到正确的筛选数据。</p><h3 id="知识点1-Object-key-获取数组索引或者对象属性"><a href="#知识点1-Object-key-获取数组索引或者对象属性" class="headerlink" title="知识点1: Object.key() 获取数组索引或者对象属性"></a>知识点1: Object.key() 获取数组索引或者对象属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(arr)); </span><br><span class="line"><span class="comment">// ["0", "1", "2"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); </span><br><span class="line"><span class="comment">// ["0", "1", "2"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anObj = &#123; <span class="number">100</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">7</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(anObj)); </span><br><span class="line"><span class="comment">// ["2", "7", "100"] 猜猜为啥？</span></span><br></pre></td></tr></table></figure><h3 id="知识点2-js里的falsy"><a href="#知识点2-js里的falsy" class="headerlink" title="知识点2: js里的falsy"></a>知识点2: js里的falsy</h3><p> <strong>falsy</strong> : 0 , false, “”, null, undefined, NaN</p><p> 在判断语句中，只有上面6种情况会是false，其余的都是true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">if</span>(a!=<span class="literal">null</span>&amp;&amp;<span class="keyword">typeof</span>(a)!=<span class="literal">undefined</span>&amp;&amp;a!=<span class="string">''</span>)&#123;</span><br><span class="line">    <span class="comment">//a有内容才执行的代码  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!!a)&#123;</span><br><span class="line">    <span class="comment">//a有内容才执行的代码...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="知识点3-Array-every-与-Array-some的区别"><a href="#知识点3-Array-every-与-Array-some的区别" class="headerlink" title="知识点3: Array.every 与 Array.some的区别"></a>知识点3: Array.every 与 Array.some的区别</h3><p>我的理解是在遍历数组的时候：</p><p><strong>Array.every</strong>的条件是「与」的关系，全真为真，及条件全为true则为true，有一个false就返回false</p><p><strong>Array.some</strong>的条件是「或」的关系，有真为真，条件有一个true就返回true，条件全为false的时候才返回false</p><p>下面举个🌰<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 判断每个名字都为Anne?</span></span><br><span class="line"><span class="keyword">let</span> dataEvery = aim.every(<span class="function"><span class="params">item</span> =&gt;</span> item.name === <span class="string">'Anne'</span>) <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> dataEvery = aim.some(<span class="function"><span class="params">item</span> =&gt;</span> item.name === <span class="string">'Anne'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断每个名字都是字符串？</span></span><br><span class="line"><span class="keyword">let</span> dataEvery = aim.every(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">typeof</span> item.name === <span class="string">'string'</span>) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> dataEvery = aim.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">typeof</span> item.name === <span class="string">'string'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="知识点4-数组的深拷贝与浅拷贝"><a href="#知识点4-数组的深拷贝与浅拷贝" class="headerlink" title="知识点4: 数组的深拷贝与浅拷贝"></a>知识点4: 数组的深拷贝与浅拷贝</h3><p>最近参与一些前端的面试工作，深拷贝与浅拷贝是我最爱问的问题之一。一个问题就考察了数据类型，数组操作，递归算法等。</p><p>因为数组是js里的引用类型，单纯复制时复制的是其引用关系。在对获取的数据进行筛选时，我并不希望影响原始数据，所以我要用到「深拷贝」得到与原始数据数据结构完全相同又相互独立的数据，而不是只复制其引用关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 我常用方法，如果项目很大，不推荐</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"><span class="comment">// 看掘金小册前端面试指南看到的</span></span><br><span class="line"><span class="comment">// 这个加缓存的方法看到的时候很惊艳，我知道递归可以解决，但是没有想过加缓存优化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cache[n]) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[n];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> prev = _fn(n - <span class="number">1</span>);</span><br><span class="line">        cache[n - <span class="number">1</span>] = prev;</span><br><span class="line">        <span class="keyword">let</span> next = _fn(n - <span class="number">2</span>);</span><br><span class="line">        cache[n - <span class="number">2</span>] = next;</span><br><span class="line">        <span class="keyword">return</span> prev + next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _fn(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 常规无缓存的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> o2[k] === <span class="string">'object'</span>) &#123;</span><br><span class="line">            o1[k] = &#123;&#125;;</span><br><span class="line">            deepClone(o1[k], o2[k]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            o1[k] = o2[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完！</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/16/hello-world/"/>
      <url>/2018/10/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
